package com.nagarro.NagData.LinkedList;public class LinkedList<E> {    private int length;    private LinkedListNode<E> head;    private LinkedListNode<E> tail;    public boolean add(int index, E element) {        /*         * Simply append to end if index to insert         * element at is greater than list size.         */        if (index >= length || length == 0)            add(element);        return true;    }    // Appends to end list.    public boolean add(E element) {        LinkedListNode<E> l = new LinkedListNode<>(element);        /*         * List is empty. Assign head and tail         * to newly added node.         */        if (head == null) {            head = l;        }        /*         * If previous last member exists,         * make it point to new tail.         */        if (tail != null) {            tail.setNext(l);        }        /*         * Make current tail's previous pointer         * point to old tail.         */        l.setPrev(tail);        tail = l;        length++;        return true;    }    @Override    public String toString() {        if (length == 0)            return "[]";        LinkedListNode<E> current = head;        StringBuilder stringBuilder = new StringBuilder("[ ");        while (current != null) {            stringBuilder.append(current).append(", ");            current = current.getNextNode();        }        // Replace redundant last comma with a right bracket        stringBuilder.replace(stringBuilder.length() - 2, stringBuilder.length(), " ]");        return stringBuilder.toString();    }    public int size() {        return length;    }}